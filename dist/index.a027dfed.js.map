{"mappings":"AC6DA,IAAI,EAAQ,SAAS,gBAAgB,CAAC,uBAClC,EAAO,SAAS,cAAc,CAAC,QAC/B,EAAO,SAAS,cAAc,CAAC,QAC/B,EAAa,SAAS,gBAAgB,CAAC,oBAGvC,EAAY,EAAM,MAAM,CACxB,EAAa,EACb,EAAmB,KASvB,SAAS,IACL,EAAa,AAAC,CAAA,EAAa,CAAA,EAAK,EAChC,GACJ,CAcA,SAAS,IAEL,CAAK,CAAC,EAAW,CAAC,SAAS,CAAC,GAAG,CAAC,UAChC,CAAU,CAAC,EAAW,CAAC,SAAS,CAAC,GAAG,CAAC,UAErC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,IACvB,IAAM,IACN,CAAK,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,UAC1B,CAAU,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,WAKnC,GACA,cAAc,GAElB,EAAmB,WAAW,EAAiB,IACnD,CAxCA,EAAK,gBAAgB,CAAC,QAAS,GAC/B,EAAK,gBAAgB,CAAC,QAUtB,WACI,EAAc,AAAA,CAAA,EAAa,EAAI,CAAA,EAAa,EAC5C,GACJ,GAZA,EAAW,OAAO,CAAC,CAAC,EAAW,KAC3B,EAAU,gBAAgB,CAAC,QAAS,KAA2B,IAcjD,IACV,EAf2D,EAgB3D,MAfR,GA0CA,EAAmB,YAAY,EAAiB","sources":["<anon>","app.js"],"sourcesContent":["// let items = document.querySelectorAll('.slider .list .item');\n// let next = document.getElementById('next');\n// let prev = document.getElementById('prev');\n// let thumbnails = document.querySelectorAll('.thumbnail .item');\n// // config param\n// let countItem = items.length;\n// let itemActive = 0;\n// // event next click\n// next.onclick = function(){\n//     itemActive = itemActive + 1;\n//     if(itemActive >= countItem){\n//         itemActive = 0;\n//     }\n//     showSlider();\n// }\n// //event prev click\n// prev.onclick = function(){\n//     itemActive = itemActive - 1;\n//     if(itemActive < 0){\n//         itemActive = countItem - 1;\n//     }\n//     showSlider();\n// }\n// // auto run slider\n// let refreshInterval = setInterval(() => {\n//     next.click();\n// }, 5000)\n// function showSlider(){\n//     // remove item active old\n//     let itemActiveOld = document.querySelector('.slider .list .item.active');\n//     let thumbnailActiveOld = document.querySelector('.thumbnail .item.active');\n//     itemActiveOld.classList.remove('active');\n//     thumbnailActiveOld.classList.remove('active');\n//     // active new item\n//     items[itemActive].classList.add('active');\n//     thumbnails[itemActive].classList.add('active');\n//     // clear auto time run slider\n//     clearInterval(refreshInterval);\n//     refreshInterval = setInterval(() => {\n//         next.click();\n//     }, 10000)\n// }\n// // click thumbnail\n// thumbnails.forEach((thumbnail, index) => {\n//     thumbnail.addEventListener('click', () => {\n//         itemActive = index;\n//         showSlider();\n//     })\n// })\nlet items = document.querySelectorAll(\".slider .list .item\");\nlet next = document.getElementById(\"next\");\nlet prev = document.getElementById(\"prev\");\nlet thumbnails = document.querySelectorAll(\".thumbnail .item\");\n// Configuration (modify as needed)\nlet countItem = items.length;\nlet itemActive = 0;\nlet autoplayInterval = null; // Use null for initial state\n// Event listeners with performance optimizations\nnext.addEventListener(\"click\", handleNextClick);\nprev.addEventListener(\"click\", handlePrevClick);\nthumbnails.forEach((thumbnail, index)=>{\n    thumbnail.addEventListener(\"click\", ()=>handleThumbnailClick(index));\n});\nfunction handleNextClick() {\n    itemActive = (itemActive + 1) % countItem;\n    showSlider();\n}\nfunction handlePrevClick() {\n    itemActive = (itemActive - 1 + countItem) % countItem; // Ensure non-negative index\n    showSlider();\n}\nfunction handleThumbnailClick(index) {\n    if (index !== itemActive) {\n        itemActive = index;\n        showSlider();\n    }\n}\nfunction showSlider() {\n    // Remove active states efficiently using direct DOM manipulation\n    items[itemActive].classList.add(\"active\");\n    thumbnails[itemActive].classList.add(\"active\");\n    for(let i = 0; i < countItem; i++)if (i !== itemActive) {\n        items[i].classList.remove(\"active\");\n        thumbnails[i].classList.remove(\"active\");\n    }\n    // Autoplay handling (optional)\n    if (autoplayInterval) clearInterval(autoplayInterval);\n    autoplayInterval = setTimeout(handleNextClick, 10000); // Use `setTimeout` for non-blocking autoplay\n}\n// Optional: Pre-calculate references to avoid repeated DOM lookups\nlet itemActiveEls = items; // Uncomment if performance is critical\n// Autoplay initialization (optional)\nautoplayInterval = setInterval(handleNextClick, 5000); // Use `setInterval` for continuous autoplay\n\n//# sourceMappingURL=index.a027dfed.js.map\n","// let items = document.querySelectorAll('.slider .list .item');\n// let next = document.getElementById('next');\n// let prev = document.getElementById('prev');\n// let thumbnails = document.querySelectorAll('.thumbnail .item');\n\n// // config param\n// let countItem = items.length;\n// let itemActive = 0;\n// // event next click\n// next.onclick = function(){\n//     itemActive = itemActive + 1;\n//     if(itemActive >= countItem){\n//         itemActive = 0;\n//     }\n//     showSlider();\n// }\n// //event prev click\n// prev.onclick = function(){\n//     itemActive = itemActive - 1;\n//     if(itemActive < 0){\n//         itemActive = countItem - 1;\n//     }\n//     showSlider();\n// }\n// // auto run slider\n// let refreshInterval = setInterval(() => {\n//     next.click();\n// }, 5000)\n// function showSlider(){\n//     // remove item active old\n//     let itemActiveOld = document.querySelector('.slider .list .item.active');\n//     let thumbnailActiveOld = document.querySelector('.thumbnail .item.active');\n//     itemActiveOld.classList.remove('active');\n//     thumbnailActiveOld.classList.remove('active');\n\n//     // active new item\n//     items[itemActive].classList.add('active');\n//     thumbnails[itemActive].classList.add('active');\n\n//     // clear auto time run slider\n//     clearInterval(refreshInterval);\n//     refreshInterval = setInterval(() => {\n//         next.click();\n//     }, 10000)\n// }\n\n// // click thumbnail\n// thumbnails.forEach((thumbnail, index) => {\n//     thumbnail.addEventListener('click', () => {\n//         itemActive = index;\n//         showSlider();\n//     })\n// })\n\n\n\n\n\n\n\n\nlet items = document.querySelectorAll('.slider .list .item');\nlet next = document.getElementById('next');\nlet prev = document.getElementById('prev');\nlet thumbnails = document.querySelectorAll('.thumbnail .item');\n\n// Configuration (modify as needed)\nlet countItem = items.length;\nlet itemActive = 0;\nlet autoplayInterval = null; // Use null for initial state\n\n// Event listeners with performance optimizations\nnext.addEventListener('click', handleNextClick);\nprev.addEventListener('click', handlePrevClick);\nthumbnails.forEach((thumbnail, index) => {\n    thumbnail.addEventListener('click', () => handleThumbnailClick(index));\n});\n\nfunction handleNextClick() {\n    itemActive = (itemActive + 1) % countItem;\n    showSlider();\n}\n\nfunction handlePrevClick() {\n    itemActive = (itemActive - 1 + countItem) % countItem; // Ensure non-negative index\n    showSlider();\n}\n\nfunction handleThumbnailClick(index) {\n    if (index !== itemActive) {\n        itemActive = index;\n        showSlider();\n    }\n}\n\nfunction showSlider() {\n    // Remove active states efficiently using direct DOM manipulation\n    items[itemActive].classList.add('active');\n    thumbnails[itemActive].classList.add('active');\n\n    for (let i = 0; i < countItem; i++) {\n        if (i !== itemActive) {\n            items[i].classList.remove('active');\n            thumbnails[i].classList.remove('active');\n        }\n    }\n\n    // Autoplay handling (optional)\n    if (autoplayInterval) {\n        clearInterval(autoplayInterval);\n    }\n    autoplayInterval = setTimeout(handleNextClick, 10000); // Use `setTimeout` for non-blocking autoplay\n}\n\n// Optional: Pre-calculate references to avoid repeated DOM lookups\nlet itemActiveEls = items; // Uncomment if performance is critical\n\n// Autoplay initialization (optional)\nautoplayInterval = setInterval(handleNextClick, 5000); // Use `setInterval` for continuous autoplay\n"],"names":["items","document","querySelectorAll","next","getElementById","prev","thumbnails","countItem","length","itemActive","autoplayInterval","handleNextClick","showSlider","classList","add","i","remove","clearInterval","setTimeout","addEventListener","forEach","thumbnail","index","setInterval"],"version":3,"file":"index.a027dfed.js.map"}