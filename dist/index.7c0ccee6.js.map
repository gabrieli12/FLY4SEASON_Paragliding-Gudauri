{"mappings":"AAAA,gEAAgE;AAChE,8CAA8C;AAC9C,8CAA8C;AAC9C,kEAAkE;AAElE,kBAAkB;AAClB,gCAAgC;AAChC,sBAAsB;AACtB,sBAAsB;AACtB,6BAA6B;AAC7B,mCAAmC;AACnC,mCAAmC;AACnC,0BAA0B;AAC1B,QAAQ;AACR,oBAAoB;AACpB,IAAI;AACJ,qBAAqB;AACrB,6BAA6B;AAC7B,mCAAmC;AACnC,0BAA0B;AAC1B,sCAAsC;AACtC,QAAQ;AACR,oBAAoB;AACpB,IAAI;AACJ,qBAAqB;AACrB,4CAA4C;AAC5C,oBAAoB;AACpB,WAAW;AACX,yBAAyB;AACzB,gCAAgC;AAChC,gFAAgF;AAChF,kFAAkF;AAClF,gDAAgD;AAChD,qDAAqD;AAErD,yBAAyB;AACzB,iDAAiD;AACjD,sDAAsD;AAEtD,oCAAoC;AACpC,sCAAsC;AACtC,4CAA4C;AAC5C,wBAAwB;AACxB,gBAAgB;AAChB,IAAI;AAEJ,qBAAqB;AACrB,6CAA6C;AAC7C,kDAAkD;AAClD,8BAA8B;AAC9B,wBAAwB;AACxB,SAAS;AACT,KAAK;AASL,IAAI,QAAQ,SAAS,gBAAgB,CAAC;AACtC,IAAI,OAAO,SAAS,cAAc,CAAC;AACnC,IAAI,OAAO,SAAS,cAAc,CAAC;AACnC,IAAI,aAAa,SAAS,gBAAgB,CAAC;AAE3C,mCAAmC;AACnC,IAAI,YAAY,MAAM,MAAM;AAC5B,IAAI,aAAa;AACjB,IAAI,mBAAmB,MAAM,6BAA6B;AAE1D,iDAAiD;AACjD,KAAK,gBAAgB,CAAC,SAAS;AAC/B,KAAK,gBAAgB,CAAC,SAAS;AAC/B,WAAW,OAAO,CAAC,CAAC,WAAW;IAC3B,UAAU,gBAAgB,CAAC,SAAS,IAAM,qBAAqB;AACnE;AAEA,SAAS;IACL,aAAa,AAAC,CAAA,aAAa,CAAA,IAAK;IAChC;AACJ;AAEA,SAAS;IACL,aAAa,AAAC,CAAA,aAAa,IAAI,SAAQ,IAAK,WAAW,4BAA4B;IACnF;AACJ;AAEA,SAAS,qBAAqB,KAAK;IAC/B,IAAI,UAAU,YAAY;QACtB,aAAa;QACb;IACJ;AACJ;AAEA,SAAS;IACL,iEAAiE;IACjE,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC;IAChC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC;IAErC,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,IAC3B,IAAI,MAAM,YAAY;QAClB,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC;QAC1B,UAAU,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC;IACnC;IAGJ,+BAA+B;IAC/B,IAAI,kBACA,cAAc;IAElB,mBAAmB,WAAW,iBAAiB,QAAQ,6CAA6C;AACxG;AAEA,mEAAmE;AACnE,IAAI,gBAAgB,OAAO,uCAAuC;AAElE,qCAAqC;AACrC,mBAAmB,YAAY,iBAAiB,OAAO,4CAA4C","sources":["app.js"],"sourcesContent":["// let items = document.querySelectorAll('.slider .list .item');\n// let next = document.getElementById('next');\n// let prev = document.getElementById('prev');\n// let thumbnails = document.querySelectorAll('.thumbnail .item');\n\n// // config param\n// let countItem = items.length;\n// let itemActive = 0;\n// // event next click\n// next.onclick = function(){\n//     itemActive = itemActive + 1;\n//     if(itemActive >= countItem){\n//         itemActive = 0;\n//     }\n//     showSlider();\n// }\n// //event prev click\n// prev.onclick = function(){\n//     itemActive = itemActive - 1;\n//     if(itemActive < 0){\n//         itemActive = countItem - 1;\n//     }\n//     showSlider();\n// }\n// // auto run slider\n// let refreshInterval = setInterval(() => {\n//     next.click();\n// }, 5000)\n// function showSlider(){\n//     // remove item active old\n//     let itemActiveOld = document.querySelector('.slider .list .item.active');\n//     let thumbnailActiveOld = document.querySelector('.thumbnail .item.active');\n//     itemActiveOld.classList.remove('active');\n//     thumbnailActiveOld.classList.remove('active');\n\n//     // active new item\n//     items[itemActive].classList.add('active');\n//     thumbnails[itemActive].classList.add('active');\n\n//     // clear auto time run slider\n//     clearInterval(refreshInterval);\n//     refreshInterval = setInterval(() => {\n//         next.click();\n//     }, 10000)\n// }\n\n// // click thumbnail\n// thumbnails.forEach((thumbnail, index) => {\n//     thumbnail.addEventListener('click', () => {\n//         itemActive = index;\n//         showSlider();\n//     })\n// })\n\n\n\n\n\n\n\n\nlet items = document.querySelectorAll('.slider .list .item');\nlet next = document.getElementById('next');\nlet prev = document.getElementById('prev');\nlet thumbnails = document.querySelectorAll('.thumbnail .item');\n\n// Configuration (modify as needed)\nlet countItem = items.length;\nlet itemActive = 0;\nlet autoplayInterval = null; // Use null for initial state\n\n// Event listeners with performance optimizations\nnext.addEventListener('click', handleNextClick);\nprev.addEventListener('click', handlePrevClick);\nthumbnails.forEach((thumbnail, index) => {\n    thumbnail.addEventListener('click', () => handleThumbnailClick(index));\n});\n\nfunction handleNextClick() {\n    itemActive = (itemActive + 1) % countItem;\n    showSlider();\n}\n\nfunction handlePrevClick() {\n    itemActive = (itemActive - 1 + countItem) % countItem; // Ensure non-negative index\n    showSlider();\n}\n\nfunction handleThumbnailClick(index) {\n    if (index !== itemActive) {\n        itemActive = index;\n        showSlider();\n    }\n}\n\nfunction showSlider() {\n    // Remove active states efficiently using direct DOM manipulation\n    items[itemActive].classList.add('active');\n    thumbnails[itemActive].classList.add('active');\n\n    for (let i = 0; i < countItem; i++) {\n        if (i !== itemActive) {\n            items[i].classList.remove('active');\n            thumbnails[i].classList.remove('active');\n        }\n    }\n\n    // Autoplay handling (optional)\n    if (autoplayInterval) {\n        clearInterval(autoplayInterval);\n    }\n    autoplayInterval = setTimeout(handleNextClick, 10000); // Use `setTimeout` for non-blocking autoplay\n}\n\n// Optional: Pre-calculate references to avoid repeated DOM lookups\nlet itemActiveEls = items; // Uncomment if performance is critical\n\n// Autoplay initialization (optional)\nautoplayInterval = setInterval(handleNextClick, 5000); // Use `setInterval` for continuous autoplay\n"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}